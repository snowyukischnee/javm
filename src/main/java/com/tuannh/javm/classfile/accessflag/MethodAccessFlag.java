package com.tuannh.javm.classfile.accessflag;

import lombok.AllArgsConstructor;
import lombok.Getter;

import java.util.ArrayList;
import java.util.List;

// https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html#jvms-4.6

//Flag Name	Value	Interpretation
//ACC_PUBLIC	0x0001	Declared public; may be accessed from outside its package.
//ACC_PRIVATE	0x0002	Declared private; accessible only within the defining class.
//ACC_PROTECTED	0x0004	Declared protected; may be accessed within subclasses.
//ACC_STATIC	0x0008	Declared static.
//ACC_FINAL	0x0010	Declared final; must not be overridden (ยง5.4.5).
//ACC_SYNCHRONIZED	0x0020	Declared synchronized; invocation is wrapped by a monitor use.
//ACC_BRIDGE	0x0040	A bridge method, generated by the compiler.
//ACC_VARARGS	0x0080	Declared with variable number of arguments.
//ACC_NATIVE	0x0100	Declared native; implemented in a language other than Java.
//ACC_ABSTRACT	0x0400	Declared abstract; no implementation is provided.
//ACC_STRICT	0x0800	Declared strictfp; floating-point mode is FP-strict.
//ACC_SYNTHETIC	0x1000	Declared synthetic; not present in the source code.

@AllArgsConstructor
@Getter
public enum MethodAccessFlag {
    ACC_PUBLIC(0x0001),
    ACC_PRIVATE(0x0002),
    ACC_PROTECTED(0x0004),
    ACC_STATIC(0x0008),
    ACC_FINAL(0x0010),
    ACC_SYNCHRONIZED(0x0020),
    ACC_BRIDGE(0x0040),
    ACC_VARARGS(0x0080),
    ACC_NATIVE(0x0100),
    ACC_ABSTRACT(0x0400),
    ACC_STRICT(0x0800),
    ACC_SYNTHETIC(0x1000);

    private int value;

    public static MethodAccessFlag[] getAccessFlags(int flags) {
        List<MethodAccessFlag> list = new ArrayList<>();
        for (MethodAccessFlag flag : MethodAccessFlag.values()) {
            if ((flag.getValue() & flags) != 0) {
                list.add(flag);
            }
        }
        MethodAccessFlag[] ret = new MethodAccessFlag[list.size()];
        ret = list.toArray(ret);
        return ret;
    }
}
